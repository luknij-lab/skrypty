https://help.github.com/en/github/committing-changes-to-your-project/changing-a-commit-message

For Linux, you need to configure the local GIT client with a username and email address,
$ git config --global user.name "your_github_username"
$ git config --global user.email "your_github_email"
$ git config -l

Now cache the given record in your computer to remembers the token:
$ git config --global credential.helper cache

Pokaż globalną konfigurację
$ git config --global --list

git
create a new directory, open it and perform a
to create a new git repository
$ git init

checkout a repository
create a working copy of a local repository by running the command
$ git clone /path/to/repository

You can change the most recent commit message using
$ git commit --amend

skopiowanie repozytorium z github
$ git clone username@host:/path/to/repository

lub

$ git clone https://github.com/user-name/my-files.git

Po modyfikacji lub dodaniu pliku
$ git add nazwa-pliku

lub
$ git add . #dodanie wszystkiego

lub
$ git add -A #dodanie wszystkiego

dodanie komentarza do dokoannych zmian
$ git commit -m "jakiś komentarz na temat zmian"

wysłanie zmian do repozytorium
$ git push

#zawsze przed rozpoczęciem pracy ściągamy aktualny stan plików
git pull

#utworzenie galezi
git branch <branch>
#utworzenie galezi z przelaczenim na nia
git branch -b <branch>
#zmina nazwy galezi
git branch -m <old-branch> <new-branch>
#usuwanie galezi
git branch -d <branch>
#zmiana galezi
git checkout <branch>
#wysłanie gałęzi do zdalnego repozytorium
git push -u otigin <branch>
#sprawdzanie wszystkich dostepnych gałęzi
git branch -a
#laczenie galezi - musisz byc na master
git merge <branch>
#wiecej na:
https://www.freecodecamp.org/forum/t/push-a-new-local-branch-to-a-remote-git-repository-and-track-it-too/13222

#w przypadku gdy jest konflikt kodu i gdy wiemy jak powinien być właściwie napisany i go poprawimy to wysłanie do repozytorium wygląda następująco:
1. poprawiamy kod
2. git add -A
3. git commit #bez niczego. Pojawi się wiadomość i aby z niej wyjść należy "nacisnąć esc :wq i naciskamy enter"

#sprawdza czy zostaly wprowadzone w zdalnym repozytorium w stosunku do kopi trzymanej lokalnie
git fetch origin master

#sprawdza roznice miedzy repozytorium
git diff <corpo_branch> <cloud_branch>

# usuwanie ostatniego commit
# Removing the last commit
# To remove the last commit from git, you can simply run:
git reset --hard HEAD^ 

# If you are removing multiple commits from the top, you can run: 
git reset --hard HEAD~2 to remove the last two commits. You can increase the number to remove even more commits.

If you want to "uncommit" the commits, but keep the changes around for reworking, remove the "--hard": git reset HEAD^ which will evict the commits from the branch and from the index, but leave the working tree around.

If you want to save the commits on a new branch name, then run git branch newbranchname before doing the git reset.


How I Got Here: I want to remove the last commit


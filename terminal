#
#  ██      ██    ██ ██   ██ ███    ██ ██      ██       ██████  ███████ ███████ ██  ██████  ███    ██    ██████  ██      
#  ██      ██    ██ ██  ██  ████   ██ ██      ██       ██   ██ ██      ██      ██ ██       ████   ██    ██   ██ ██      
#  ██      ██    ██ █████   ██ ██  ██ ██      ██ █████ ██   ██ █████   ███████ ██ ██   ███ ██ ██  ██    ██████  ██      
#  ██      ██    ██ ██  ██  ██  ██ ██ ██ ██   ██       ██   ██ ██           ██ ██ ██    ██ ██  ██ ██    ██      ██      
#  ███████  ██████  ██   ██ ██   ████ ██  █████        ██████  ███████ ███████ ██  ██████  ██   ████ ██ ██      ███████ 
#                                                                                                                       
# Spis treści
# 
# 1.  Podstawowe komendy -------- 24
# 2.  Prawa dostępu ------------- 60
# 3.  Pliki i katalogi ---------- 106
# 4.  Web ----------------------- 177
# 5.  Programy ------------------ 231
# 6.  Procesy ------------------- 242
# 7.  Transfer plików ----------- 263
# 8.  Archiwa ------------------- 289
# 9.  SSH ----------------------- 373
# 10. Baza danych --------------- 399 
# 11. Xpath --------------------- 424
# 12. SED ----------------------- 488
# 13. TMUX ---------------------- 634
# 14. GREP ---------------------- 653
# 15. Do ogarnięcia ------------- 664
                                                                                                                      
#        __   __   __   __  ___            __        ___          __         ___       __      
#  |    |__) /  \ |  \ /__`  |   /\  |  | /  \ |  | |__     |__/ /  \  |\/| |__  |\ | |  \ \ / 
#  |    |    \__/ |__/ .__/  |  /~~\ |/\| \__/ |/\| |___    |  \ \__/  |  | |___ | \| |__/  |  
#  

cat - Kopiowanie wejscia do wyjscia.
grep - Wyszukiwanie ciagow znakow w danych wejsciowych.
sort - Sortowanie wierszy danych wejsciowych.
cut - Odczytywanie kolumn z danych wejsciowych.
sed - Wykonywanie operacji edycyjnych na danych wejsciowych.
tr - Zamienianie znakow znajdujacych sie w danych wejsciowych na inne znaki.

========================= TERMINAL
ctrl + d zatrzymanie zadania
$ ps aux | grep htop - sprawdzanie czy proces htop działa

# wyświetlenie procesów działających w obecnej powłoce
ps

# wyświetlenie obszernych informacji na temat wszystkich procesów działających w systemie
ps -ef | less

# zabicie procesu
kill {id_procesu}

# zabicie procesu w przypadku gdy standardowe polecenie nie będzie skuteczne
kill -9 {id_procesu}

gedit ~/.bashrc

# wlasny alias
alias nazwa_wlasna_skrotu="cd ~/ścieżka-do-katalogu-ktory-chcesz-miec-skrot"

# oddanie poniższej linii do bashrc spowoduje, że wszystkie skrypty które umieścimy w wskazanym katalogu będą dostępne z każdego miejsca na pc
export PATH="$PATH":""

#          __   __                     __   __   __  ___  ___  __       
#  | |    |__) |__)  /\  |  |  /\     |  \ /  \ /__`  |  |__  |__) |  | 
#  | |    |    |  \ /~~\ |/\| /~~\    |__/ \__/ .__/  |  |___ |    \__/ 
#                                                                       

# sprawdzenie jacy użytkownicy zanjdują się w grupie www-data
grep ^www-data /etc/group

# udzielenie dostepu zapisu w folderze /var/www/
# give you access, and the WebServer access. Apache2 runs as www-data by default

sudo chown $USER:www-data /var/www/my-site

#we need to make sure any files created in the folder are automatically given www-data as the group owner (so that it can actually read files it needs to read); we set the "SetGID" sticky bit for this. We also may want to stop other users (except superuser and the web server) from accessing the folder too, in case there's passwords stored in the data that should not be exposed (see my warning at the bottom of the answer)

sudo chmod g+s /var/www/my-site
g - the permissions that other users in the file's group have for it
s - set user or group ID on execution

sudo chmod o-rwx /var/www/my-site
o - others (neither u, nor g)

# do udzielenia odpowiednich zeswoleń edycji /var/www używaj powyższej metody
sudo chown -R username:www-data /var/www/strona-www/

# Apache group - How do I add an existing user named vivek to group Apache group www-data?
sudo adduser {USER-NAME-HERE} {GROUP-NAME-HERE}
sudo adduser vivek www-data

sudo useradd -g www-data vivek

### set the password for vivek user ###
sudo passwd vivek

# sprawdzanie uzytkownika obecnie zalogowanego
whoami

# oznaczenia napedow
lsblk

=== rapair flash drive
# narzedzeni fsck

# usuwanie katalogow
rm -r <nazwa-katalogu>

#            __                                  ___            __   __    
#  | | |    |__) |    | |__/ |    |    |__/  /\   |   /\  |    /  \ / _` | 
#  | | |    |    |___ | |  \ |    |    |  \ /~~\  |  /~~\ |___ \__/ \__> | 
#   

# usuwanie katalogow z (-f force) aby uniknac powtarzalnych zapytan czy usunac zabezpieczony plik
rm -r -f <nazwa-katalogu>

# usuwanie plików w aktualnym katalogu o określonym rozszerzeniu
rm *.php

# usuwanie plików w aktualnym katalogu o określonym rozszerzeniu i z potwierdzeniem usunięcia
rm -i *.php

# sprawdzanie ilość lini w pliku csv
cat nazwa_pliku | wc -l

# sprawdzanie praw dostepu
stat file_name

# nadawanie plikom bash praw do wykonania 
chmod 777 simple_bash.sh

# nadanie praw dla wszystkich katalogów
find . -type d -exec chmod 755 {} \;

# nadanie praw dla wszystkich plików
find . -type f -exec chmod 644 {} \;

# nano
nano -c [filename]

# usuwanie wszystkich plików w katalogu
rm /home/lukaszszozda/Pobrane/plugins/*

# -v pokazuje proces
rm -v /home/lukaszszozda/Pobrane/plugins/*

#sprawdzanie ścieżki
pwd

#pomoc
?

#znajdź
find -name "*c*" -type d

#sprawdzanie rozmiaru pliku
du -sh zrzyt.sql

#zmiana nazwy pliku
mv nazwaPliku i nowaNazwaPliku

#przenoszenie pliku do innego katalogu
mv nazwaPliku nazwaKatalogu/

# sprawdzanie rozmiar pliku lub katalogu
du -sh zrzut.sql

# sprawdzanie przestrzeni dyskowej
df -h

# dane o pliku
ls -l (long) nazwaPliku
la -a (all) pokazuje także ukryte pliki

# wylistowanie plików o danym rozszerzeniu
ls *.php

#                  ___  __  
#  | \  /    |  | |__  |__) 
#  |  \/     |/\| |___ |__) 
#   

# Googlebot headers 
https://support.google.com/webmasters/answer/1061943?hl=en

#dyrektywy dla robotow
https://support.google.com/webmasters/answer/1061943?hl=pl

#curl
curl -- version

#sprawdzanie czy na danej domenie zablokowane są boty
curl -I -A "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)" http://domena.pl

#sprawdzanie czy przekierowanie jest prawidłowe
curl -I http://domena.pl

#curl tip curl standardowo sprawa domenę curl`owskim user-agentem. Czesto serwery go blokuja i wtedy jest zwracane 403 forbidden
#wyswietla pierwszą linię z head
curl -s -I http://domena.pl | head -n 1 

# pobranie adresów URL z sitemap.xml
curl -s sitemap_url | grep "<loc>" | awk -F"<loc>" '{print $2} ' | awk -F"</loc>" '{print $1}'

#paramert k powoduje, że nie jest sprawdzana poprawność SSL chain itp.
-k 

#sprawdzanie IP domeny
host domena.pl
whois (IP 123.45.67.89)

#sprawdzanie wersji shell
$SHELL --version

#podążaj
-k
#wyświetl nagłówek
-I

#sprawdza adres IP
ifconfig lub ip a

#otwieranie strony w przegladarce tekstowej
lynx www.google.pl

#sprawdzanie ciasteczek
crtl + K

#pobieranie plików
wget 'https://domena.pl/plikJakiChcemyPrzesłaćNaSwójSerwer.bin'

#           __   __   __   __   __                 
#  \  /    |__) |__) /  \ / _` |__)  /\   |\/| \ / 
#   \/     |    |  \ \__/ \__> |  \ /~~\  |  |  |  
# 

#ftp midnight commander
mc

dpkg - menadzer pakietow
dpkg [opcja...] dzilanie

#             __   __   __   __   ___  __      
#  \  / |    |__) |__) /  \ /  ` |__  /__` \ / 
#   \/  |    |    |  \ \__/ \__, |___ .__/  |  
#   

# operacja w tle screen
screen -S zrzut <- uruchomienie procesu w tle o nazwie zrzut
ctrl+a+d <- wyjście z tła
screen -ls <- podgląd jakie procesy są uruchomione w tle
screen -r nazwaProcesu lub pit <- powrót do procesu
crtl+c lub exit <- wyjście z screena

# jeżeli chcemy aby proces w tle, automatycznie sie zamkną po jego wykoaniu wtedy wpisujemy screen in polecenie jakie chcemy wykonać.

#sprawdzanie uruchomionych procesów
systemctl

# Aktualne procesy
ps 
ps -aux - procesy z przypisanym użytkownikiem
              
#              ___  __             __   ___  ___  __      __               __       
#  \  / | |     |  |__)  /\  |\ | /__` |__  |__  |__)    |__) |    | |__/ /  \ |  | 
#   \/  | |     |  |  \ /~~\ | \| .__/ |    |___ |  \    |    |___ | |  \ \__/ |/\| 
#   

#scp przesyłanie pliku na serwer user@hosting <- hosting docelowy
scp file/folder user@hosting_ip:/katalog/docelowy/na_serwerze

#scp przesyłanie pliku na serwer z podaniem innego portu
scp -P port_number file/folder user@hosting_ip:/katalog/docelowy/na_serwerze

#scp przesyłanie pliku na lokalną maszynę z serwera
scp wickerwouq@54.37.121.237:/homez.364/wickerwouq/www/kopi-a/testy <- folder lub plik który chcemy wysłać /home/folder <- miejsce docelowe

#wget przesylanie dużego pliku
wget 'https://speed.hetzner.de/10GB.bin'

scp -r /home/lukasz/Dokumety/klienci/katalog lukaszszozda@177.227.22.22:/home/..

#pełny backup za pomocą tar
tar pczf backup.lar.gz <- nazwa tworzonego archiwum
tar pczf backup.tar.gz zrzut.sql katalog <- pliki i katalogi które chcemy archiwizować

#przesyłanie backupu na inny serwer protokołem scp
scp backup.tar.gz nazwaUżytkownika@adresHostingu:~ login, hasło i katalog serwera na który chcemy wysłać dane (tylda ~ mówi to tym żeby zgrać do domyślnego katalogu)

#                      __   __                   
#  \  / | | |     /\  |__) /  ` |__| | |  |  /\  
#   \/  | | |    /~~\ |  \ \__, |  | | |/\| /~~\ 
#  

========================= UNRAR
1. First you need to install unrar:

sudo apt-get install unrar

2. If you want to unpack all files within the .rar files in the same directory:
unrar e -r /home/work/software/myfile.rar

3. you want to unpack the files in full path:
unrar x -r /home/work/software/myfile.rar

========================= ZIP
# Create an encrypted ZIP file secure.zip from some file:
zip --encrypt secure.zip file

# Create password protected ZIP archive secure.zip from the several files:
zip --encrypt secure.zip file1 file2 file3

# Create password protected ZIP archive secure.zip with all files in current directory:
zip --encrypt -r secure.zip .

# Create an encrypted ZIP archive secure.zip from a folder /var/log/:
zip --encrypt -r secure.zip /var/log/

# Use the following command to uncompress a ZIP file:
unzip secure.zip

# Create an encrypted ZIP file secure.zip from some file:
$ zip --encrypt secure.zip file
Enter password: 
Verify password: 
  adding: file (deflated 8%)

# Create password protected ZIP archive secure.zip from the several files:
$ zip --encrypt secure.zip file1 file2 file3
Enter password: 
Verify password: 
  adding: file1 (stored 15%)
  adding: file2 (deflated 30%)
  adding: file3 (deflated 45%)

# Create an encrypted ZIP archive secure.zip from a folder /var/log/:
$ zip --encrypt -r secure.zip /var/log/
Enter password: 
Verify password: 
  adding: var/log/ (stored 0%)
  adding: var/log/dmesg.0 (deflated 74%)
  adding: var/log/dpkg.log.9.gz (deflated 0%)
  adding: var/log/samba/log.asc-nb (deflated 96%)

# Use the following command to uncompress a ZIP file:
$ unzip secure.zip
Enter password:

========================= TAR
#backup strony za pomocą tar
tar -pczf nazwa-tworzonego-archiwum.tar.gz plik01 plik02 katalog <- wskazujemy jakie pliki i katalogi mają być spakowane do archiwum

#rozpakowanie archiwum
tar -zxvf backup.tar.gz

# pakowanie z wyłaczeniem jednego lub więcej katalogów/plików. Na końcu wskazanego folderu w exclude nie powinno być slasha.
tar -pczf backWP.tar.gz --exclude='/wp-content/updraft' wp-content -v

#tworzy archiwum wszystkich plików z podanego katalogu. Można też podać nazwę określonego pliku.
tar -cvf archiwum.tar katalog_z_plikami/

#Powyższy przykład rozpakowuje archiwum. Bazując na rozszerzeniu (tar, tar.gz, tar.bz2) tar powinien sam zastosować odpowiednie opcje rozpakowywania.
tar -xvf archiwum.tar
tar zxvf archiwum.tar

Dostępne opcje:
-c (tworzy archiwum)
-t (wyświetla zawartość archiwum)
-x (rozpakowuje archiwum)
-f (używa określonego pliku lub urządzenia)
-Z (kompresuje lub dekompresuje za pomocą programu compress)
-z (kompresuje lub dekompresuje za pomocą programu gzip)

#            __   __       
#  | \_/    /__` /__` |__| 
#  | / \    .__/ .__/ |  | 
#

#ssh login
ssh user@ip

ssh user@ip -p 2233 <- gdy jest inny port

#szukanie
ctrl+w

#szukanie odpowiedniej linii kombinacja klawiczy
ctrl+shift "-"

#wyswietla zainstalowane moduly
pactl list short modules

#ssh sprawdzanie domyślnego języka na serwerze ssh
locale
# sprawdzanie environmental variable
env
env | grep PATH
echo $PATH

#          __       __          __                 __       
#  \_/    |__)  /\   /  /\     |  \  /\  |\ | \ / /  ` |__| 
#  / \    |__) /~~\ /_ /~~\    |__/ /~~\ | \|  |  \__, |  | 
#  

# zrzus bazy danych mysql - aby baza była dobrze wykonana na końcu pliku powinna być informacja, że prawidłowo została utworzona
mysqldump -u username nazwa_db -p'hasło' > zrzut.sql
mysql -u -h -p > zrzut.sql

# backup DB
mysqldump -u użytkownik -h hosting -p db1  > zrzut.sql

# do ogarnięcia - robienie bazy z parametrami
mysqldump -u root -ppass --routines --triggers --extended-insert --no-autocommit --lock-all-tables --quick --default-character-set=utf8mb4 "db_to_backup"

### zgrywanie bazy danych do serwera mysql
mysqldump -u użytkownik -h hosting -p db1  > zrzut.sql

# zgrywanie kilku baz danych
mysqldump -u użytkownik -h hosting -p hasło --databases db1 db1 > dwie-bazy.sql

# zgrywanie wszystkich baz danych
mysqldump -u użytkownik -h host -p hasło --all-databases > wszystkie-bazy.sql

# zgrywanie wybranych tabel
mysqldump -u użytkownik -h host -p db1 wp_posts wp_users > dwie-tabele-bazy.sql

### przywracanie bazy
mysql -u użytkownik -h localhost -p < all_db.sql

# przywracanie jednej konkretnej bazy
mysql -u użytkownik -h localhost -p db1 < db1.sql

# przywracanie dwóch baz
mysql -u użytkownik -h localhost -p < two_db.sql

# przywracanie tabel
mysql -u użytkownik -h localhost -p db1 < two-tables-db1.sql

# import bazy
mysql -u <username> -p <databasename> < <filename.sql>

========= IF MYSQL ERROR
1. mysqldump: Error: 'Access denied; you need (at least one of) the PROCESS privilege(s) for this operation' when trying to dump tablespaces
--no-tablespaces

2. mysqldump: Couldn't execute 'SELECT COLUMN_NAME
--column-statistics=0

3. mysqldump: Couldn't execute 'FLUSH TABLES': Access denied
--lock-all-tables <- blad spowodowany tym zapisem

4. mysqldump: Unknown table 'COLUMN_STATISTICS' in information_schema (1109). 
INFO: This is due to a new flag that is enabled by default in mysqldump 8. You can disable it by adding --column-statistics=0. 

--column-statistics=0

#                __       ___      
#  \_/ |    \_/ |__)  /\   |  |__| 
#  / \ |    / \ |    /~~\  |  |  | 
#  

# Basic XPath - XPath expression select nodes or list of nodes on the basic of attributes like ID, Name, Classname, etc. frim the XML document as illustrated below.
xpath "//input[@name='uid']"
xpath "//input[@type='text']"
xpath "//label[@id='message23']"
xpath "//input[@value='RESET']"
xpath "//*[@class='barone']"
xpath "//a[@href='http://demo.guru99.com/']"
xpath "//img[@src='//cdn.guru99.com/images/home/java.png']"

# contains - Contains() is a method used in XPath expression. It is used when the value of any attribute changes dynamically, for example, login information. The contain feature has an ability to find the element with partial text as show in below example.
xpath "//*[contains(@type,'sub')]"
xpath "//*[contains(text(),'here')]"
xpath "//*[contains(@href,'guru99.com')]"

# and or
xpath "//*[@type='submit' or @name='btnReset']"
xpath "//input[@type='submit' and @name='btnLogin']"

# Starts-with function
xpath "//label[starts-with(@id,'message')]"

# Text()
xpath "//td[text()='UserID']"

# xpath axes methods
xpath "//*[@type='text']//following::input"

#              __   ___  __  
#  \_/ | |    /__` |__  |  \ 
#  / \ | |    .__/ |___ |__/ 
#    

# In this tutorial, you’ll use a copy of the BSD Software License to experiment with sed. On Ubuntu, execute the following commands to copy the BSD license file to your home directory so you can work with it:

$ cd
$ cp /usr/share/common-licenses/BSD .

# podstawowe użycie
$ sed [options] commands [file-to-edit]

# If you don’t have a local copy of the BSD license, create one yourself with this command:
$ cat << 'EOF' > BSD

# Let’s use sed to view the contents of the BSD license file. sed sends its results to the screen by default, which means you can use it as a file reader by passing it no editing commands. Try executing the following command:

$ sed '' BSD

# The single quotes contain the editing commands you pass to sed. In this case, you passed it nothing, so sed printed each line it received to standard output. sed can use standard input rather than a file. Pipe the output of the cat command into sed to produce the same result:

$ cat BSD | sed ''

## Printing Lines

# In the previous example, you saw that input passed into sed without any operations would print the results directly to standard output. Let’s explore sed’s explicit print command, which you specify by using the p character within single quotes.

$ sed 'p' BSD

# You’ll see each line of the BSD file printed twice. sed automatically prints each line by default, and then you’ve told it to print lines explicitly with the “p” command, so you get each line printed twice. You can clean up the results by passing the -n option to sed, which suppresses the automatic printing:

# If you examine the output closely, you’ll see that it has the first line twice, followed by the second line twice, etc, which tells you that sed operates on data line by line. It reads a line, operates on it, and outputs the resulting text before repeating the process on the next line. You can clean up the results by passing the -n option to sed, which suppresses the automatic printing:

$ sed -n 'p' BSD

# We now are back to printing each line once.

## Using Address Ranges

# Let’s have sed print the first line of the file. Execute the following command:
$ sed -n '1p' BSD

# By placing the number 1 before the print command, you told sed the line number to operate on. You can just as easily print five lines (don’t forget the “-n”):
$ sed -n '1,5p' BSD

# You’ve just given an address range to sed. If you give sed an address, it will only perform the commands that follow on those lines. In this example, you’ve told sed to print line 1 through line 5. You could have specified this in a different way by giving the first address and then using an offset to tell sed how many additional lines to travel, like this:
$ sed -n '1,+4p' BSD

# If you want to print every other line, specify the interval after the ~ character. The following command prints every other line in the BSD file, starting with line 1:
$ sed -n '1~2p' BSD

## Deleting Text

# Modify the last command from the previous section to make it delete every other line starting with the first:

$ sed '1~2d' BSD

# If we want to save our edits, we can redirect standard output to a file like so:
$ sed '1~2d' BSD > everyother.txt

# The sed command does not edit the source file by default, but you can change this behavior by passing the -i option, which means “perform edits in-place.” This will alter the source file. Warning: Using the -i switch will overwrite the original file, so you should use this with care. Perform the operations without the -i switch first and then run the command again with -i once you have what you want, create a backup of the original file, or redirect the output to a file. It’s very easy to accidentally alter the original file with the -i switch.
$ sed -i '1~2d' everyother.txt

# The -i option can be dangerous. Thankfully, sed gives you the ability to create a backup file prior to editing. To create a backup file prior to editing, add the backup extension directly after the “-i” option:
$ sed -i.bak '1~2d' everyother.txt

## Substituting Text

# In its most basic form, you can change one word to another word using the following syntax:
's/old_word/new_word/'
# The s is the substitute command. The three slashes (/) are used to separate the different text fields. You can use other characters to delimit the fields if it would be more helpful. For instance, if you were trying to change a website name, using another delimiter would be helpful since URLs contain slashes. Execute the following command to print a URL with echo and modify it with sed, using the underscore (_) character as the delimiter:
$ echo "http://www.example.com/index.html" | sed 's_com/index_org/home_'

# This replaces com/index with org/home. The output shows the modifed URL:

echo "this is the song that never ends
yes, it goes on and on, my friend
some people started singing it
not knowing what it was
and they'll continue singing it forever
just because..." > song.txt

# Now let’s substitute the expression on with forward. Use the following command:

$ sed 's/on/forward/' song.txt

# The output looks like this:

this is the sforwardg that never ends
yes, it goes forward and on, my friend
some people started singing it
not knowing what it was
and they'll cforwardtinue singing it forever
just because...

# You can see a few notable things here. First, is that sed replaced patterns, not words. The on within song is changed to forward. The other thing to notice is that on line 2, the second on was not changed to forward. This is because by default, the s command operates on the first match in a line and then moves to the next line. To make sed replace every instance of on instead of just the first on each line, you must pass an optional flag to the substitute command.

# Provide the g flag to the substitute command by placing it after the substitution set:
$ sed 's/on/forward/g' song.txt

# If you only wanted to change the second instance of “on” that sed finds on each line, then you would use the number 2 instead of the g:
$ sed 's/on/forward/2' song.txt

# If you only want to see which lines were substituted, use the -n option again to suppress automatic printing. You can then pass the p option to the substitute command to print lines where substitution took place.
$ sed -n 's/on/forward/2p' song.txt

# As you can see, you can combine the flags at the end of the command. If you want the search process to ignore case, you can pass it the “i” flag.
$ sed 's/SINGING/saying/i' song.txt

## Replacing and Referencing Matched Text

# If you want to find more complex patterns with regular expressions, you have a number of different methods of referencing the matched pattern in the replacement text. For instance, to match from the beginning of the line to at, use the following command:
$ sed 's/^.*at/REPLACED/' song.txt

# Every group of search text marked with parentheses can be referenced by an escaped reference number. For instance, the first parentheses group can be referenced with \1, the second with \2 and so on. In this example, we’ll switch the first two words of each line:

$ sed 's/\([a-zA-Z0-9][a-zA-Z0-9]*\) \([a-zA-Z0-9][a-zA-Z0-9]*\)/\2 \1/' song.txt

# As you can see, the results are not perfect. For instance, the second line skips the first word because it has a character not listed in our character set. Similarly, it treated they'll as two words in the fifth line. Let’s improve the regular expression to be more accurate:

$ sed 's/\([^ ][^ ]*\) \([^ ][^ ]*\)/\2 \1/' song.txt

REPLACED never ends
yes, it goes on and on, my friend
some people started singing it
REPLACED it was
and they'll continue singing it forever
just because...

# Since you don’t know the exact phrase that will match in the search string, you can use the & character to represent the matched text in the replacement string. Let’s put parentheses around the matched text:

$ sed 's/^.*at/(&)/' song.txt

## grymoire.com/Unix/Sed.html
## gnu.org/software/sed/manual/sed.html
#sed - Sed has several commands, but most people inly  learn the substitute command: "s" The substitute command changes all occurrences of the regular expression into a new value. A simple example is changing "day" int he "old" file to "night" ine the "new" file:

sed 's/day/night/' <old >new

#or another way for UNIX beginners

sed 's/day/night/' old >new

# Ancestor

#               ___                
#  \_/ | | |     |   |\/| |  | \_/ 
#  / \ | | |     |   |  | \__/ / \ 
#   

# TMUX (ctrl + b)

tmux ls - aby wyświetlić liste sesji
tmux attach -t [session_name] - ponowne polaczenie do sesji
tmux rename-session -t 0 new_name - zmiana nazwy sesji np. "0" na "new_name"
tmux new -s new_session_name - tworzenie nowej sessji o podanej nazwie np. "new_session_name
tmux kill-session -t new_session_name - zamykanie sesji

()c - nowe okno
()w - lista otwartych okien
()d - aby odłaczyc sie od tmux
()1 - w przypadku gdy chcemy przełaczyć się do okna nr 1
(), - zmiana nazwy okna

#                 __   __   ___  __  
#  \_/ | \  /    / _` |__) |__  |__) 
#  / \ |  \/     \__> |  \ |___ |    
#       

-v	Shows all the lines that do not match the searched string
-c	Displays only the count of matching lines
-n	Shows the matching line and its number
-i	Match both (upper and lower) case
-l	Shows just the name of the file with the string

#               __   __      __   __        __          ___  __         
#  \_/ \  /    |  \ /  \    /  \ / _`  /\  |__) |\ | | |__  /  ` |  /\  
#  / \  \/     |__/ \__/    \__/ \__> /~~\ |  \ | \| | |___ \__, | /~~\ 
# 

for link in `cat baza.csv`; do httpCode=`curl -s -I "$link" | head -n 1`; echo "$link $httpCode"; done
cat ooo | grep 404
cat ooo | grep -v 404
less ~/.bash_history
cat ooo | sort | uniq -c
cat ooo | sort | uniq
for link in `cat baza.csv`; do httpCode=`curl -s -I "$link" | head -n 1`; echo "RewriteRule $link http://dupa.pl"; done | grep 404
tail

# edycja historii bash
vi ~/.bash_history

# całkowite usuwanie danych z dysku
shred -vfz -n 10 /dev/xxx

# przegląd innych dysków
lsblk

========================= INSTALL
# install chrome 
wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
sudo dpkg -i google-chrome*.deb
sudo apt-get install -f

========================= SSL
# Sprawdzenie daty ważności certyfikatu SSL
export SITE_URL="site_url_here"
export SITE_SSL_PORT="443"
openssl s_client -connect ${SITE_URL}:${SITE_SSL_PORT} -servername ${SITE_URL} 2?/dev/null | openssl x509 -noout -dates
